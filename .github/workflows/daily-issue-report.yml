name: Daily Issue Report

on:
  schedule:
    - cron: '30 3 * * *'  # 9:00 AM IST
  workflow_dispatch:

jobs:
  issue-report:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout this repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests

      - name: Generate & Send Report
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          python <<EOF
          import os
          import requests
          from datetime import datetime, timedelta

          GH_TOKEN = os.getenv("GH_TOKEN")
          TEAMS_WEBHOOK_URL = os.getenv("TEAMS_WEBHOOK_URL")
          HEADERS = {
              "Authorization": f"Bearer {GH_TOKEN}",
              "Accept": "application/vnd.github+json"
          }

          since_dt = datetime.utcnow() - timedelta(days=1)
          since = since_dt.isoformat() + "Z"

          def format_section(title, issues):
              if not issues:
                  return f"**{title}**\n> _None_\n"
              lines = [f"**{title}**"]
              for i in issues:
                  number = i["number"]
                  title = i["title"]
                  url = i["html_url"]
                  author = i["user"]["login"]
                  lines.append(f"- #{number}: {title} [View]({url}) (by @{author})")
              return "\n".join(lines) + "\n"

          with open("repos.txt", "r") as f:
              repos = [line.strip() for line in f if line.strip()]

          report = [f"📅 **GitHub Issue Report — {datetime.utcnow().strftime('%Y-%m-%d')}**\n"]

          for repo in repos:
              owner, name = repo.split("/")
              url = f"https://api.github.com/repos/{owner}/{name}/issues?state=all&since={since}"
              response = requests.get(url, headers=HEADERS)
              issues = response.json()

              if not isinstance(issues, list):
                  report.append(f"### 📁 `{repo}`\n> ⚠️ Failed to fetch issues.\n")
                  continue

              opened_recently = []
              closed_recently = []
              still_open = []

              for issue in issues:
                  if "pull_request" in issue:
                      continue
                  created = datetime.strptime(issue["created_at"], "%Y-%m-%dT%H:%M:%SZ")
                  closed = issue.get("closed_at")
                  closed = datetime.strptime(closed, "%Y-%m-%dT%H:%M:%SZ") if closed else None
                  state = issue["state"]

                  if state == "open" and created >= since_dt:
                      opened_recently.append(issue)
                  elif state == "closed" and closed and closed >= since_dt:
                      closed_recently.append(issue)
                  elif state == "open" and created < since_dt:
                      still_open.append(issue)

              report.append(f"### 📁 Repository: {repo}\n")
              report.append(format_section("🟢 Opened in last 24 hours", opened_recently))
              report.append(format_section("🔴 Closed in last 24 hours", closed_recently))
              report.append(format_section("🟠 Still Open (older than 24h)", still_open))

          payload = { "text": "\n".join(report) }

          res = requests.post(TEAMS_WEBHOOK_URL, json=payload)
          if res.status_code != 200:
              print("❌ Failed to send report:", res.status_code, res.text)
          else:
              print("✅ Report sent successfully.")
          EOF
