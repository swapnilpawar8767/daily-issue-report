
name: Daily Issue Report

on:
  schedule:
    - cron: '30 3 * * *'  # 9:00 AM IST = 3:30 AM UTC
  workflow_dispatch:

jobs:
  issue-report:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Read repository list
        id: read_repos
        run: |
          repos=$(cat repos.txt | xargs | tr '\n' ' ')
          echo "repos=$repos" >> $GITHUB_OUTPUT

      - name: Generate report
        id: generate_report
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "📅 GitHub Issue Report — $(date -u +'%Y-%m-%d')" > report.txt
          echo "" >> report.txt

          python3 <<EOF >> report.txt
import requests
from datetime import datetime, timedelta

HEADERS = {"Authorization": f"Bearer '${{ secrets.GH_TOKEN }}'"}
repos = "${{ steps.read_repos.outputs.repos }}".split()
since_dt = datetime.utcnow() - timedelta(days=1)
since = since_dt.strftime("%Y-%m-%dT%H:%M:%SZ")

def format_section(title, issues):
    if not issues:
        return f"**{title}**\n> _None_"
    lines = [f"**{title}**"]
    for issue in issues:
        lines.append(f"- #{issue['number']}: {issue['title']} [View]({issue['html_url']}) (by @{issue['user']['login']})")
    return "\n".join(lines)

report = []

for repo in repos:
    owner, name = repo.split("/")
    url = f"https://api.github.com/repos/{owner}/{name}/issues?state=all&since={since}"
    response = requests.get(url, headers=HEADERS)
    issues = response.json()

    repo_report = [f"### 📁 `{repo}`"]

    if not isinstance(issues, list):
        repo_report.append("> ⚠️ Failed to fetch issues.\n")
        report.append("\n".join(repo_report))
        continue

    opened_recently = []
    closed_recently = []
    still_open = []

    for issue in issues:
        if "pull_request" in issue:
            continue
        created = datetime.strptime(issue["created_at"], "%Y-%m-%dT%H:%M:%SZ")
        closed = issue.get("closed_at")
        closed = datetime.strptime(closed, "%Y-%m-%dT%H:%M:%SZ") if closed else None
        state = issue["state"]

        if state == "open" and created >= since_dt:
            opened_recently.append(issue)
        elif state == "closed" and closed and closed >= since_dt:
            closed_recently.append(issue)
        elif state == "open" and created < since_dt:
            still_open.append(issue)

    repo_report.append(format_section("🟢 Opened in last 24 hours", opened_recently))
    repo_report.append(format_section("🔴 Closed in last 24 hours", closed_recently))
    repo_report.append(format_section("🟠 Still Open (older than 24h)", still_open))
    report.append("\n".join(repo_report))

print("\n\n".join(report))
EOF

      - name: Send to Microsoft Teams
        env:
          WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK }}
        run: |
          text=$(cat report.txt | sed ':a;N;$!ba;s/\n/\\n/g' | sed 's/"/\\"/g')
          payload="{\"text\": \"$text\"}"
          curl -H "Content-Type: application/json" -d "$payload" "$WEBHOOK_URL"
